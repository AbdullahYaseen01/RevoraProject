generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  emailVerified      DateTime?
  phone              String?
  password           String?
  role               UserRole            @default(PROPERTY_SEEKER)
  subscriptionTier   SubscriptionTier    @default(STARTER)
  isEmailVerified    Boolean             @default(false)
  isPhoneVerified    Boolean             @default(false)
  twoFactorEnabled   Boolean             @default(false)
  twoFactorSecret    String?
  backupCodes        String?             @default("[]")
  lastLoginAt        DateTime?
  loginAttempts      Int                 @default(0)
  lockedUntil        DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  affiliateProfile   AffiliateProfile?
  cashBuyerProfile   CashBuyerProfile?
  contacts           Contact[]
  invoices           Invoice[]
  paymentMethods     PaymentMethod[]
  payments           Payment[]
  referral           Referral?           @relation("ReferredUser")
  searches           Search[]
  sessions           Session[]
  subscription       Subscription?
  profile            UserProfile?
  verificationTokens VerificationToken[]

  @@map("users")
}

model UserProfile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  legalName          String?
  businessEntity     String?
  companyName        String?
  mailingAddress     String?
  marketsOfInterest  String?             @default("[]")
  contactPreferences String?             @default("[]")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model CashBuyerProfile {
  id                   String             @id @default(cuid())
  userId               String             @unique
  investmentCriteria   Json
  verificationStatus   VerificationStatus @default(PENDING)
  proofOfFundsVerified Boolean            @default(false)
  verifiedAmountRange  String?
  dealHistory          Json?
  kycVerified          Boolean            @default(false)
  entityVerified       Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cash_buyer_profiles")
}

model Property {
  id            String          @id @default(cuid())
  rentcastId    String          @unique
  address       String
  city          String
  state         String
  zipCode       String
  latitude      Float?
  longitude     Float?
  beds          Int?
  baths         Float?
  squareFeet    Int?
  lotSize       Float?
  yearBuilt     Int?
  lastSalePrice Float?
  lastSaleDate  DateTime?
  propertyType  String?
  status        String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  contacts      Contact[]
  images        PropertyImage[]

  @@map("properties")
}

model PropertyImage {
  id         String   @id @default(cuid())
  propertyId String
  imageUrl   String
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_images")
}

model Search {
  id           String   @id @default(cuid())
  userId       String
  searchParams Json
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("searches")
}

model Contact {
  id          String        @id @default(cuid())
  userId      String
  propertyId  String
  contactType String
  status      ContactStatus @default(PENDING)
  contactInfo Json
  cost        Float?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  property    Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model AffiliateProfile {
  id             String       @id @default(cuid())
  userId         String       @unique
  businessType   String
  socialMedia    Json
  promoCode      String       @unique
  referralLink   String       @unique
  commissionRate Float        @default(0.25)
  totalEarnings  Float        @default(0)
  isApproved     Boolean      @default(false)
  bankAccountId  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  commissions    Commission[]
  referrals      Referral[]

  @@map("affiliate_profiles")
}

model Referral {
  id             String           @id @default(cuid())
  affiliateId    String
  referredUserId String           @unique
  referralCode   String
  status         String           @default("pending")
  conversionDate DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  commissions    Commission[]
  affiliate      AffiliateProfile @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  referredUser   User             @relation("ReferredUser", fields: [referredUserId], references: [id], onDelete: Cascade)

  @@map("referrals")
}

model Commission {
  id             String           @id @default(cuid())
  affiliateId    String
  referralId     String?
  subscriptionId String?
  amount         Float
  rate           Float            @default(0.25)
  status         String           @default("pending")
  paymentDate    DateTime?
  stripePayoutId String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  affiliate      AffiliateProfile @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  referral       Referral?        @relation(fields: [referralId], references: [id])
  subscription   Subscription?    @relation(fields: [subscriptionId], references: [id])

  @@map("commissions")
}

model Subscription {
  id                   String           @id @default(cuid())
  userId               String           @unique
  stripeCustomerId     String?          @unique
  stripeSubscriptionId String?          @unique
  tier                 SubscriptionTier
  status               String
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  commissions          Commission[]
  invoices             Invoice[]
  payments             Payment[]
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Payment {
  id                    String        @id @default(cuid())
  userId                String
  stripePaymentId       String        @unique
  stripePaymentIntentId String?       @unique
  amount                Float
  currency              String        @default("usd")
  description           String?
  status                String
  paymentMethodId       String?
  invoiceId             String?
  subscriptionId        String?
  metadata              Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  subscription          Subscription? @relation(fields: [subscriptionId], references: [id])
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  userId                String
  stripePaymentMethodId String   @unique
  type                  String
  cardBrand             String?
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  isDefault             Boolean  @default(false)
  billingAddress        Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model Invoice {
  id               String        @id @default(cuid())
  userId           String
  stripeInvoiceId  String        @unique
  subscriptionId   String?
  amount           Float
  currency         String        @default("usd")
  status           String
  hostedInvoiceUrl String?
  invoicePdf       String?
  periodStart      DateTime?
  periodEnd        DateTime?
  dueDate          DateTime?
  paidAt           DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  subscription     Subscription? @relation(fields: [subscriptionId], references: [id])
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [identifier], references: [email])

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  type      String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("email_verifications")
}

model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  ipAddress String
  userAgent String?
  success   Boolean
  reason    String?
  createdAt DateTime @default(now())

  @@map("login_attempts")
}

enum UserRole {
  PROPERTY_SEEKER
  CASH_BUYER
  AFFILIATE
  ADMIN
}

enum SubscriptionTier {
  STARTER
  PRO
  ENTERPRISE
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum ContactStatus {
  PENDING
  CONTACTED
  RESPONDED
  CLOSED
  FAILED
}
